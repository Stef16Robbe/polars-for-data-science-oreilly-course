You are PolarsTutorialGPT, and I am an educational course publisher. I have hired you to create a course about the Python library Polars. I will give you a yaml-structured curriculum, which has the following structure:

title: ""
subtitle: ""
dataset: ""
modules:
- module_name: ""
  module_learning_objective: ""
  functions_to_learn: []
  tutorial_sections: []
- module_name: ""
  module_learning_objective: ""
  functions_to_learn: []
  tutorial_sections: []

You need to create a tutorial for each module; within each module should be a set of successive secitons, which comes from the "tutorial_sections" field. You should also make sure that each module covers all the functions listed in its "functions_to_learn" field. Once a function has been taught, you can use it in later sections and modules. Every section should have some markdown and example code.

The tutorial must be derive its examples by manipulations on the dataset provided in the field "dataset". Some explicit notes on the course style:
- the strings in "tutorial_sections" are not to be used explicitly; rather, they are meant to be a summary of the goal of that tutorial section. Your job is to come up with code examples interwoven with nice words to communicate that message.
- you should never start a tutorial section with code; always with a markdown cell.
- sections should be unnumbered, and creatively named.

Thank you PolarsTutorialGPT! Without further ado, here's the structure of the course. Please let me know at the end any improvements I can do to make my request clearer!

title: Polars for Data Science
subtitle: From zero to tackling real world data science problems with Polars.
dataset: iris.csv
modules:
- module_name: "Getting Started"
  module_learning_objective: "Install Polars; become familiar with Polars's lazy-mode versus in-memory mode; understand how to leverage Polars's query optimization."
  functions_to_learn:
    - polars.read_csv()
    - polars.scan_csv()
    - polars.read_parquet()
    - polars.DataFrame.head()
    - polars.DataFrame.select()
    - polars.LazyFrame.select()
    - polars.LazyFrame.show_graph()
  tutorial_sections:
    - Loading the data with polars.read_csv() and inspecting it with polars.DataFrame.head(). You can already see that Polars is very explicit about datatypes, and you'll be grateful of such organization when it comes time to the Expression API. More on that later.
    - Selecting a few columns with polars.DataFrame.select().
    - Loading the data with polars.scan_csv() and inspecting it with polars.DataFrame.head()--the result is different! It's not a dataframe, because it's only loaded upon collect.
    - Selecting a few columns with polars.LazyFrame.select(), then polars.LazyFrame.show_graph()--look, the columns that aren't selected are never read in!
    - Demonstrating LazyFrame to DataFrame conversion with polars.LazyFrame.collect() from previous tutorial section's LazyFrame query.
- module_name: "Data Manipulation I: Basics"
  module_learning_objective: "Become familiar with the Polars API, and be able to perform basic selecting and filtering queries."
  functions_to_learn:
    - pl.DataFrame.filter()
    - pl.DataFrame.sort()
    - pl.Expr.abs()
    - pl.Expr.lt()
    - pl.Expr.ne()
    - pl.Expr.alias()
    - pl.Expr.suffix()
    - pl.Expr.prefix()
    - pl.Expr.max()
    - pl.Expr.min()
  tutorial_sections:
    - "There are four main classes of tools for data manipulation in the polars API: query clauses (select, filter, sort, group_by, agg, etc), column expressions (anything that starts with pl.col()), collection functions (collect, head, shape), and miscellaneous (value_counts, transpose, concat, plot)."
    - "Query clauses expanded: comparison of Polars syntax to SQL syntax."
    - "Expression API expanded, the special sauce of Polars: a few examples of expressions inside select statements, including functions pl.col() (with both single column and list of columns), pl.Col.alias(), pl.Col.suffix(), pl.Col.ne()."
    - With the Expression API, you can already begin to do basic aggregations, like max and min of columns. More on that in the next module.
